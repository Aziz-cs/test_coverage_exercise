// Mocks generated by Mockito 5.0.14 from annotations
// in test_coverage_exercise/test/core/data_services/person_data_service_test.dart.
// Do not manually edit this file.

import 'package:mockito/mockito.dart' as _i1;
import 'package:test_coverage_exercise/core/error_service.dart' as _i3;
import 'package:test_coverage_exercise/core/logger_mixin.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeLogging_0 extends _i1.Fake implements _i2.Logging {}

/// A class which mocks [ErrorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorService extends _i1.Mock implements _i3.ErrorService {
  MockErrorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logging get logger => (super.noSuchMethod(Invocation.getter(#logger),
      returnValue: _FakeLogging_0()) as _i2.Logging);
  @override
  void handleException({Exception? e}) =>
      super.noSuchMethod(Invocation.method(#handleException, [], {#e: e}),
          returnValueForMissingStub: null);
  @override
  void handleError({Exception? e}) =>
      super.noSuchMethod(Invocation.method(#handleError, [], {#e: e}),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
  @override
  void info(dynamic message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#info, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void error(dynamic message, [dynamic error, StackTrace? stackTrace]) => super
      .noSuchMethod(Invocation.method(#error, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void warning(dynamic message, [dynamic error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
          Invocation.method(#warning, [message, error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void debug(dynamic message, [dynamic error, StackTrace? stackTrace]) => super
      .noSuchMethod(Invocation.method(#debug, [message, error, stackTrace]),
          returnValueForMissingStub: null);
}
